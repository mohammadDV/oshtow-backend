<?php

namespace App\Filament\Resources\ClaimResource\RelationManagers;

use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Actions\Action;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Filters\SelectFilter;
use Domain\Payment\Models\PaymentSecure;

/**
 * Payment Secures Relation Manager
 *
 * Note: Admins can only view payment secures. Create, edit, and delete actions are disabled
 * because payment secures are automatically generated by the system during the claim payment process.
 */
class PaymentSecuresRelationManager extends RelationManager
{
    protected static string $relationship = 'paymentSecures';

    protected static ?string $recordTitleAttribute = 'amount';

    protected static ?string $title = 'پرداخت‌های امن';

    protected static ?string $modelLabel = 'پرداخت امن';

    protected static ?string $pluralModelLabel = 'پرداخت‌های امن';

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('amount')
                    ->label(__('site.amount'))
                    ->numeric()
                    ->prefix(__('site.currency'))
                    ->required(),
                Forms\Components\Select::make('status')
                    ->label(__('site.status'))
                    ->options([
                        PaymentSecure::PENDING => __('site.pending'),
                        PaymentSecure::RELEASED => __('site.released'),
                        PaymentSecure::CANCELLED => __('site.cancelled'),
                    ])
                    ->required(),
                Forms\Components\DateTimePicker::make('expires_at')
                    ->label(__('site.expires_at'))
                    ->nullable(),
                Forms\Components\Textarea::make('description')
                    ->label(__('site.description'))
                    ->rows(3)
                    ->maxLength(1000)
                    ->nullable(),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label(__('site.table_id'))
                    ->sortable()
                    ->searchable(),
                TextColumn::make('wallet.id')
                    ->label(__('site.wallet'))
                    ->sortable()
                    ->searchable()
                    ->color('secondary')
                    ->icon('heroicon-o-credit-card'),
                TextColumn::make('amount')
                    ->label(__('site.amount'))
                    ->money('IRR')
                    ->sortable()
                    ->searchable(),
                BadgeColumn::make('status')
                    ->label(__('site.status'))
                    ->colors([
                        'warning' => PaymentSecure::PENDING,
                        'success' => PaymentSecure::RELEASED,
                        'danger' => PaymentSecure::CANCELLED,
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        PaymentSecure::PENDING => __('site.pending'),
                        PaymentSecure::RELEASED => __('site.released'),
                        PaymentSecure::CANCELLED => __('site.cancelled'),
                        default => $state,
                    }),
                TextColumn::make('user.nickname')
                    ->label(__('site.user'))
                    ->searchable()
                    ->sortable()
                    ->url(fn ($record) => $record->user ? route('filament.admin.resources.users.view', $record->user) : null)
                    ->openUrlInNewTab()
                    ->color('primary')
                    ->icon('heroicon-o-user')
                    ->tooltip(__('site.click_to_view_user_details')),
                TextColumn::make('expires_at')
                    ->label(__('site.expires_at'))
                    ->dateTime('Y/m/d H:i')
                    ->sortable()
                    ->color(fn ($record) => $record->expires_at && $record->expires_at->isPast() ? 'danger' : 'success'),
                TextColumn::make('created_at')
                    ->label(__('site.created_at'))
                    ->dateTime('Y/m/d H:i')
                    ->sortable(),
            ])
            ->filters([
                SelectFilter::make('status')
                    ->label(__('site.status'))
                    ->options([
                        PaymentSecure::PENDING => __('site.pending'),
                        PaymentSecure::RELEASED => __('site.released'),
                        PaymentSecure::CANCELLED => __('site.cancelled'),
                    ]),
                SelectFilter::make('user_id')
                    ->label(__('site.user'))
                    ->options(function () {
                        return \Domain\User\Models\User::pluck('nickname', 'id');
                    })
                    ->searchable(),
            ])
            ->actions([
                ViewAction::make()
                    ->label(__('site.view_payment_secure')),
                Action::make('release')
                    ->label(__('site.release_payment_secure'))
                    ->color('success')
                    ->icon('heroicon-o-check-circle')
                    ->requiresConfirmation()
                    ->modalHeading(__('site.release_payment_secure'))
                    ->modalDescription(__('site.release_payment_secure_description'))
                    ->modalSubmitActionLabel(__('site.release'))
                    ->action(function (PaymentSecure $record) {
                        $response = \Illuminate\Support\Facades\Http::withHeaders([
                            'Authorization' => 'Bearer ' . \Illuminate\Support\Facades\Auth::user()->createToken('admin')->plainTextToken,
                            'Accept' => 'application/json',
                        ])->post(route('api.profile.payment-secure.release', $record));

                        if ($response->successful()) {
                            \Filament\Notifications\Notification::make()
                                ->title(__('site.payment_secure_released'))
                                ->success()
                                ->send();
                        } else {
                            \Filament\Notifications\Notification::make()
                                ->title(__('site.error'))
                                ->body($response->json('message'))
                                ->danger()
                                ->send();
                        }
                    })
                    ->visible(fn (PaymentSecure $record) => $record->status === PaymentSecure::PENDING),
                Action::make('cancel')
                    ->label(__('site.cancel_payment_secure'))
                    ->color('danger')
                    ->icon('heroicon-o-x-circle')
                    ->requiresConfirmation()
                    ->modalHeading(__('site.cancel_payment_secure'))
                    ->modalDescription(__('site.cancel_payment_secure_description'))
                    ->modalSubmitActionLabel(__('site.cancel'))
                    ->action(function (PaymentSecure $record) {
                        $response = \Illuminate\Support\Facades\Http::withHeaders([
                            'Authorization' => 'Bearer ' . \Illuminate\Support\Facades\Auth::user()->createToken('admin')->plainTextToken,
                            'Accept' => 'application/json',
                        ])->post(route('api.profile.payment-secure.cancel', $record));

                        if ($response->successful()) {
                            \Filament\Notifications\Notification::make()
                                ->title(__('site.payment_secure_cancelled'))
                                ->success()
                                ->send();
                        } else {
                            \Filament\Notifications\Notification::make()
                                ->title(__('site.error'))
                                ->body($response->json('message'))
                                ->danger()
                                ->send();
                        }
                    })
                    ->visible(fn (PaymentSecure $record) => $record->status === PaymentSecure::PENDING),
            ])
            ->defaultSort('created_at', 'desc');
    }
}
