<?php

namespace App\Filament\Resources;

use App\Filament\Resources\PaymentSecureResource\Pages;
use Domain\Payment\Models\PaymentSecure;
use Domain\Claim\Models\Claim;
use Domain\Wallet\Models\Wallet;
use Domain\Wallet\Models\WalletTransaction;
use Domain\User\Models\User;
use Domain\Project\Models\Project;
use Domain\Notification\Services\NotificationService;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Grid;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\Action;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Filters\Filter;
use Filament\Forms\Components\DatePicker;
use Carbon\Carbon;
use Filament\Notifications\Notification;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

/**
 * Payment Secure Resource
 *
 * Note: Admins can only view payment secures. Create, edit, and delete actions are disabled
 * because payment secures are automatically generated by the system during the claim payment process.
 * This ensures data integrity and prevents unauthorized modifications to payment records.
 */
class PaymentSecureResource extends Resource
{
    protected static ?string $model = PaymentSecure::class;

    protected static ?string $navigationIcon = 'heroicon-o-credit-card';

    protected static ?string $navigationGroup = 'Financial';

    protected static ?int $navigationSort = 7;

    public static function getNavigationLabel(): string
    {
        return __('site.payment_secures');
    }

    public static function getModelLabel(): string
    {
        return __('site.payment_secure');
    }

    public static function getPluralModelLabel(): string
    {
        return __('site.payment_secures');
    }

    public static function getNavigationGroup(): ?string
    {
        return __('site.Payment Management');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make(__('site.payment_secure_information'))
                    ->schema([
                        Grid::make(2)
                            ->schema([
                                Select::make('claim_id')
                                    ->label(__('site.claim'))
                                    ->options(Claim::pluck('id', 'id'))
                                    ->searchable()
                                    ->required()
                                    ->relationship('claim', 'id'),
                                Select::make('wallet_id')
                                    ->label(__('site.wallet'))
                                    ->options(Wallet::pluck('id', 'id'))
                                    ->searchable()
                                    ->required()
                                    ->relationship('wallet', 'id'),
                                TextInput::make('amount')
                                    ->label(__('site.amount'))
                                    ->numeric()
                                    ->prefix(__('site.currency'))
                                    ->required(),
                                Select::make('status')
                                    ->label(__('site.status'))
                                    ->options([
                                        PaymentSecure::PENDING => __('site.pending'),
                                        PaymentSecure::RELEASED => __('site.released'),
                                        PaymentSecure::CANCELLED => __('site.cancelled'),
                                    ])
                                    ->required(),
                                DateTimePicker::make('expires_at')
                                    ->label(__('site.expires_at'))
                                    ->nullable(),
                                Select::make('user_id')
                                    ->label(__('site.user'))
                                    ->options(User::pluck('nickname', 'id'))
                                    ->searchable()
                                    ->required()
                                    ->relationship('user', 'nickname'),
                            ]),
                        Textarea::make('description')
                            ->label(__('site.description'))
                            ->rows(3)
                            ->maxLength(1000)
                            ->nullable(),
                    ])->columns(1),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label(__('site.table_id'))
                    ->sortable()
                    ->searchable(),
                TextColumn::make('claim.id')
                    ->label(__('site.claim'))
                    ->sortable()
                    ->searchable()
                    ->url(fn ($record) => $record->claim ? route('filament.admin.resources.claims.view', $record->claim) : null)
                    ->openUrlInNewTab()
                    ->color('primary')
                    ->icon('heroicon-o-clipboard-document-list')
                    ->tooltip(__('site.click_to_view_claim_details')),
                TextColumn::make('wallet.id')
                    ->label(__('site.wallet'))
                    ->sortable()
                    ->searchable()
                    ->color('secondary')
                    ->icon('heroicon-o-credit-card'),
                TextColumn::make('amount')
                    ->label(__('site.amount'))
                    ->money('IRR')
                    ->sortable()
                    ->searchable(),
                BadgeColumn::make('status')
                    ->label(__('site.status'))
                    ->colors([
                        'warning' => PaymentSecure::PENDING,
                        'success' => PaymentSecure::RELEASED,
                        'danger' => PaymentSecure::CANCELLED,
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        PaymentSecure::PENDING => __('site.pending'),
                        PaymentSecure::RELEASED => __('site.released'),
                        PaymentSecure::CANCELLED => __('site.cancelled'),
                        default => $state,
                    }),
                TextColumn::make('user.nickname')
                    ->label(__('site.user'))
                    ->searchable()
                    ->sortable()
                    ->url(fn ($record) => $record->user ? route('filament.admin.resources.users.view', $record->user) : null)
                    ->openUrlInNewTab()
                    ->color('primary')
                    ->icon('heroicon-o-user')
                    ->tooltip(__('site.click_to_view_user_details')),
                TextColumn::make('expires_at')
                    ->label(__('site.expires_at'))
                    ->dateTime('Y/m/d H:i')
                    ->sortable()
                    ->color(fn ($record) => $record->expires_at && $record->expires_at->isPast() ? 'danger' : 'success'),
                TextColumn::make('created_at')
                    ->label(__('site.created_at'))
                    ->dateTime('Y/m/d H:i')
                    ->sortable(),
            ])
            ->filters([
                SelectFilter::make('status')
                    ->label(__('site.status'))
                    ->options([
                        PaymentSecure::PENDING => __('site.pending'),
                        PaymentSecure::RELEASED => __('site.released'),
                        PaymentSecure::CANCELLED => __('site.cancelled'),
                    ]),
                SelectFilter::make('claim_id')
                    ->label(__('site.claim'))
                    ->options(Claim::pluck('id', 'id'))
                    ->searchable(),
                SelectFilter::make('user_id')
                    ->label(__('site.user'))
                    ->options(User::pluck('nickname', 'id'))
                    ->searchable(),
                Filter::make('expired')
                    ->label(__('site.expired_payments'))
                    ->query(fn (Builder $query): Builder => $query->where('expires_at', '<', now())),
                Filter::make('active')
                    ->label(__('site.active_payments'))
                    ->query(fn (Builder $query): Builder => $query->where('expires_at', '>', now())),
            ])
            ->actions([
                ViewAction::make()
                    ->label(__('site.view_payment_secure')),
                Action::make('release')
                    ->label(__('site.release_payment_secure'))
                    ->color('success')
                    ->icon('heroicon-o-check-circle')
                    ->requiresConfirmation()
                    ->modalHeading(__('site.release_payment_secure'))
                    ->modalDescription(__('site.release_payment_secure_description'))
                    ->modalSubmitActionLabel(__('site.release'))
                    ->action(function (PaymentSecure $record) {
                        // Server-side validation to ensure only pending payments can be released
                        if ($record->status !== PaymentSecure::PENDING) {
                            \Filament\Notifications\Notification::make()
                                ->title(__('site.error'))
                                ->body(__('site.payment_secure_not_pending'))
                                ->danger()
                                ->send();
                            return;
                        }

                        try {
                            // Start DB transaction
                            DB::beginTransaction();

                            // Release the payment secure
                            $record->release();

                            // Create wallet transaction
                            WalletTransaction::createTransaction(
                                $record->walletReleased,
                                $record->amount,
                                WalletTransaction::DEPOSITE,
                                __('site.wallet_transaction_payment_secure_released', ['claim_id' => $record->claim->id])
                            );

                            // Send notification
                            NotificationService::create([
                                'title' => __('site.payment_secure_released_title'),
                                'content' => __('site.payment_secure_released_content'),
                                'id' => $record->claim->id,
                                'type' => NotificationService::CLAIM,
                            ], $record->claim->project->type == Project::PASSENGER ? $record->claim->project->user : $record->claim->user);

                            Notification::make()
                                ->title(__('site.payment_secure_released'))
                                ->success()
                                ->send();


                            $record->claim->update([
                                'status' => Claim::DELIVERED,
                            ]);

                            $record->claim->project->update([
                                'status' => Project::COMPLETED,
                            ]);

                            // Commit transaction
                            DB::commit();

                        } catch (\Exception $e) {
                            // Rollback transaction on error
                            DB::rollBack();
                            Notification::make()
                                ->title(__('site.error'))
                                ->body($e->getMessage())
                                ->danger()
                                ->send();
                        }
                    })
                    ->visible(fn (PaymentSecure $record) => $record->status === PaymentSecure::PENDING),
                Action::make('cancel')
                    ->label(__('site.cancel_payment_secure'))
                    ->color('danger')
                    ->icon('heroicon-o-x-circle')
                    ->requiresConfirmation()
                    ->modalHeading(__('site.cancel_payment_secure'))
                    ->modalDescription(__('site.cancel_payment_secure_description'))
                    ->modalSubmitActionLabel(__('site.cancel'))
                    ->action(function (PaymentSecure $record) {
                        // Server-side validation to ensure only pending payments can be released
                        if ($record->status !== PaymentSecure::PENDING) {
                            \Filament\Notifications\Notification::make()
                                ->title(__('site.error'))
                                ->body(__('site.payment_secure_not_pending'))
                                ->danger()
                                ->send();
                            return;
                        }

                        try {
                            // Start DB transaction
                            DB::beginTransaction();

                            // Release the payment secure
                            $record->cancel();

                            // Create wallet transaction
                            WalletTransaction::createTransaction(
                                $record->wallet,
                                $record->amount,
                                WalletTransaction::DEPOSITE,
                                __('site.wallet_transaction_payment_secure_return', ['claim_id' => $record->claim->id])
                            );

                            $record->claim->update([
                                'status' => Claim::CANCELED,
                            ]);

                            $record->claim->project->update([
                                'status' => Project::FAILED,
                            ]);

                            // Send notification
                            NotificationService::create([
                                'title' => __('site.payment_secure_cancelled_title'),
                                'content' => __('site.payment_secure_cancelled_content'),
                                'id' => $record->claim->id,
                                'type' => NotificationService::CLAIM,
                            ], $record->claim->project->type == Project::PASSENGER ? $record->claim->project->user : $record->claim->user);

                            Notification::make()
                                ->title(__('site.payment_secure_cancelled'))
                                ->success()
                                ->send();

                            // Commit transaction
                            DB::commit();

                        } catch (\Exception $e) {
                            // Rollback transaction on error
                            DB::rollBack();
                            Notification::make()
                                ->title(__('site.error'))
                                ->body($e->getMessage())
                                ->danger()
                                ->send();
                        }
                    })
                    ->visible(fn (PaymentSecure $record) => $record->status === PaymentSecure::PENDING),
            ])
            ->bulkActions([
                // Bulk actions removed - admins cannot delete payment secures
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListPaymentSecures::route('/'),
            'view' => Pages\ViewPaymentSecure::route('/{record}'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();
    }
}
